1. Javascript(弱数据类型，只有当赋值后才知道是数据类型)组成：ECMAScript，Web APIs(DOM,BOM) -->
2. 基础知识
     输入：prompt()
     输出：
          在body输出：document.write()
          在打印台输出：console.log()

     定义：let(变量)，const(常量)

     基本数据类型：数字型number ->整数、小数、负数
                  字符串型string
                  布尔型boolean ->ture false(''->空字符串、0、undefind、false、NaN、null转换为布尔值后都是false)
                  未定义型undefined ->undefined(未赋值)
                  空类型null ->object(用于尚未创建的对象)(赋值了，但内容为空)  
     引用数据类型：object对象

     注释：''   ""   ``

     算术运算符：+、-、*、/、% (除了+需要看情况，其他均会转化为数字型进行计算)
                             ('1'-1:结果为0) 
                            （+'123':将123这个字符串转化为数字型）
                             (1+'123':会将1转化为字符串，结果为1123)          
3.模板字符串：用反引号，${变量名}
     隐式转换：系统自动进行转换处理
     显示转换：程序员做转换处理
               转换为数字型：Number ->转换为数字型
                                     若内容有非数字，转换失败时结果为NaN
                            parselnt ->只保留整数
                            parseFloat ->可以保留小数
4.数组(有序)
     增:数组.push('元素1,元素2,....')        ->加在数组后面，增加一个或多个，返回值是数组的新长度
        数组.unshift()                      ->加在数组前面，增加一个或多个，返回值是数组的新长度
     删:数组.pop()                          ->删除最后一个，只能删一个，不带参数，返回值是删除的元素
        数组.shift()                        ->删除第一个，只能删一个，不带参数，返回值是删除的元素
        数组.splice()                       ->删除指定元素
                                            ->数组.splice(起始位置，删除几个元素(若不写默认从起始位置删完))
5.函数->(抽取，封装)
     声明格式：
          function 函数名(){            
               函数体
          }
     调用格式：
          函数名()

     
     函数表达式法：                      
          let fn=function(){
               函数体
          }
     调用：
          fn()
     
     立即执行法(前后必须打上分号)：
     (1)
     ;(function () {} )();
     (2)
     ;(function () {} ());
7. 对象(无序)
     JavaScript里的一种数据类型
     可以详细的描述某个事物


     声明语法：
          let 对象名 = {
               属性：属性值,
               方法名：函数
          }


     查：
          对象名.属性
          对象名['属性名']
     改：对象名.属性=属性值
     增：对象名.新属性=属性值
     删：delete 对象名.属性  (了解)
     
     
     方法调用：对象名.方法名


     内置对象-Math：
          random：生成[0-1)之间的随机数
                  Math.floor(Math.random()*11)          ->生成[0-10]之间的随机数
                  Math.floor(Math.random()*(m-n+1)+n)   ->生成[n-m]之间的随机数
          ceil；向上取整
          floor；向下取整
          max；找最大数
          min：找最小数
          pow：幂运算
          abs：绝对值
8.Web APIs
     作用：使用JS去操作html和浏览器
     分类：DOM(文档对象模型)(范畴：事件监听、事件对象、事件流、事件委托、节点操作)
               作用：操作网页内容->操作标签，开发网页内容特效和实现用户交互
               DOM树：将HTML文档以树状结构直观的表现出来。直观的体现了标签与标签之间的关系
          BOM(浏览器对象模型)(范畴：定时器、(M端事件))
          注意：(javascript核心范畴：回调函数、日期对象、环境对象)

     DOM对象：
          基本概念和操作：
               浏览器根据html标签生成的js对象
               所有的标签属性都可以在这个对象上面找到
               修改这个对象的属性会自动映射到标签身上 

               document对象：提供的属性和方法都是用来访问和操作网页内容的，网页所有内容都在document里面

               获取DOM元素：
                    根据css选择器来获取DOM元素
                         选择匹配的第一个元素：document.querySelector(CSS选择器字符串)
                         选择匹配的多个元素：document.querySelectorAll('')
                         注意：哪怕只有一个元素，通过querySelectorAll()获取过来的也是一个伪数组
               
               操作元素属性：
                    操作元素常用属性：对象.属性=值
               操作元素样式属性：
                    对象.style.样式属性='值'
                    对象.className='类名'         ->会覆盖之前存在的类，需要将所有类全部填入
                    对象.classList.add('类名')    ->新增类，之前的类还在，且不用写进来
                    对象.classList.remove('类名') ->删除类
                    对象.classList.toggle('类名') ->切换类，有就删，无就加
               操作表单元素属性：
                    获取：对象.属性名
                    设置：对象.属性名=新值
                    表单属性中添加就有效果，移除就没有效果，一律使用布尔值表示，如果为true代表添加了该属性，如果是false代表移除了该属性，如disabled，checked，selected     

               自定义属性：
                    以data-开头
                    在DOM对象上一律以dataset对象方式获取
                    eg：data-id
                        获取：对象.dataset.id
          定时器-间歇函数
               使用场景：每隔一段时间需要自动执行一段代码，不需要我们手动去触发，例如：倒计时
               开启定时器：setInterval(函数名,间隔时间)  ->每隔一段时间调用这个函数，单位毫秒（ms）1s=1000ms,但不带单位，函数不加小括号，若要加，需要''
                         返回的是一个id数字(第几个定时器)
               关闭定时器：let 变量名=setInterval(函数名,间隔时间)
                         clearInterval(变量名)        
          事件监听：
               就是让程序检测是否有事件发生，一旦有事件触发，就立即调用一个函数做出响应，也称为绑定事件或者注册事件
               事件：在编程时系统内发生的动作或发生的事，如用户在网页上单击一个按钮
               语法：
                    元素对象.addEventListener('事件类型',要执行的函数)
               三要素：
                    事件源(哪个dom元素被事件触发了)
                    事件类型(用什么方式触发)：鼠标事件：鼠标触发：
                                                            click点击
                                                            mouseenter鼠标经过
                                                            mouseleave鼠标离开
                                        焦点事件：表单获得光标：
                                                            focus获得光标
                                                            blur失去焦点
                                        键盘事件：键盘触发：
                                                            Keydown键盘按下触发
                                                            Keyup键盘抬起触发
                                        文本事件：表单输入触发：
                                                            input用户输入
                    事件处理程序(调用的函数)
               版本：
                    DOM L0:事件源.on事件=function(){}    ->会覆盖
                    DOM L2:事件源.addEventListener(事件，事件处理函数)    ->不会出现事件覆盖情况             
          事件对象(e,event,)：
               也是个对象(在事件绑定中回调函数的第一个参数就是事件对象)，这个对象里有事件触发时的相关信息  eg：鼠标点击事件中，事件对象就存了鼠标点在哪个位置
               使用场景：
                    可以判断用户按下哪个键，比如回车键可以发布新闻
                    可以判断鼠标点击了哪个元素，从而做出相应的操作
               部分常用属性(事件对象.属性)：
                    type获取当前事件的类型
                    clientX/clientY获取光标相对于浏览器可见窗口左上角的位置
                    offsetX/offsetY获取光标相对于当前DOM元素左上角的位置
                    Key用户按下的键盘键的值
          补充：
               trim()去除字符串左右的空格，使用：str.trim()
          环境对象(谁调用，this就指向谁)：
               函数内部特殊的变量this，它代表着当前函数运行时所处的环境
               每个函数里面都有this环境对象，普通函数里面的this指向window
          回调函数：
               如果将函数A作为参数传递给B时，我们称函数A为回调函数
          事件流：
               事件完整执行过程中的流动路径，两个阶段：捕获阶段(从父到子)->冒泡阶段(从子到父)
               实际工作都是使用事件冒泡为主
               事件捕获：从DOM根元素去执行对应的事件(从外到里)
                    DOM.addEventListener(事件类型,时间处理函数,是否使用捕获机制->true(捕获) false(默认，冒泡))
               事件冒泡：
                    当一个元素的事件被触发时，同样的事件将会在该元素的所有祖先元素中依次被触发
                    当一个元素触发事件后，会依次向上调用所有父级元素的同名事件
                    阻止冒泡：
                         事件对象.stopPropagation()  ->阻断事件流动传播不仅能阻止冒泡，还能阻止捕获
               解绑事件：
                    on事件方式，直接使用null覆盖就可以实现事件的解绑
                    语法：
                         L0:
                              对象.on事件类型=null
                              eg：btn.onclick=null
                         L2:
                              对象.removeEventListener(事件类型，事件处理函数，[获取捕获或冒泡阶段])
                              注意：匿名函数无法解绑
          事件委托：
               利用事件流的特征解决一些开发需求的知识技巧
               原理：利用事件冒泡的特点
                    给父元素注册事件，当我们触发子元素的时候，会冒泡到父元素身上，从而触发父元素的事件
               优点：减少注册次数，可以提高程序性能
               实现：事件对象.target.tagName 可以获得真正触发事件的元素
          阻止元素默认行为：
               事件对象.preventDefault()
          其他事件：
               页面加载事件：加载外部资源(如图片、外联CSS和JS等)加载完毕时触发的事件
                    为什么学？
                         有时需要等页面资源全部处理完了做一些事
                         老代码喜欢把script写在head中，这时候直接找dom元素找不到
                    事件名：load
                    监听页面所有资源加载完毕：
                         给window添加load事件
                              ->等待页面所有资源加载完毕，就回去执行回调函数
                              window.addEventListener('load',function(){
                                   //执行的操作
                              })
                    注意：不光可以监听整个页面资源加载完毕，也可以针对某个资源绑定load事件
                    监听HTML文档完全加载和解析完毕(速度快)：
                         给document添加DOMContentLoaded事件
                              ->等待页面所有资源加载完毕，就回去执行回调函数
                              document.addEventListener('DOMContentLoaded',function(){
                                   //执行的操作
                              })
               元素滚动事件：滚动条在滚动的时候持续触发的事件
                    为什么要学？
                         很多网页需要检测用户把页面滚动到某个区域后做一些处理，如固定导航栏，返回顶部
                    事件名：scroll
                    给window(或document)添加scroll事件
                              ->等待页面所有资源加载完毕，就回去执行回调函数
                              window.addEventListener('scroll',function(){
                                   //执行的操作
                              })
                    注意：监听某个元素的内部滚动直接给某个元素加即可
                    属性(可读取，可赋值)：
                         针对某元素内部的滚动：
                              对象.scrollLeft被卷去的左部长度
                              对象.scrollTop被卷去的顶部长度
                              对象.scrollTo(x,y)
                         针对整个页面的滚动：
                              document.documentElement.scrollLeft被卷去的左部长度
                              document.documentElement.scrollTop被卷去的顶部长度
                              或:
                              window.scrollTo(x,y)  ->x被卷去的左部长度,y被卷去的顶部长度
               页面尺寸事件：
                    事件名：resize
                         window.addEventListener('resize',function(){
                              //执行的代码
                         })
                         检测屏幕宽度：
                         window.addEventListener('resize',function(){
                              let w=document.documentElement.clientWidth
                              conslole.log(w)
                         })
                    获取宽高：
                         offsetWidth和offsetHeight
                         获取元素的自身宽高，包含元素自身设置的宽高、padding、border
                         clientWidth和clientHeight
                         获取可见元素的宽高，包含元素自身设置的宽高、padding
                         注意：获取的是可视宽高，如果盒子是隐藏的，获取结果是0
                    获取位置：
                         offsetLeft和offsetTop   ->只读
                         获取元素距离自己定位父级元素的左、上距离(无定位就是body)

                         element.getBoundingClientRect()
                         方法返回元素的大小及其相对于视口的位置'
          日期对象：
               用来表示时间的对象，可以得到当前系统时间
               实例化：
                    在代码中发现了new关键字时，一般将这个操作称为实例化
                    获得当前时间：
                         const date = new Date()
                    获得指定时间：
                         const date1 = new Date('2025-5-19')
               日期对象方法：
                    getFullYear()获得年份  获取四位年份
                    getMonth()获得月份   取值为0~11
                    getDate()获取月份中的每一天   不同月份取值也不相同
                    getDay()获取星期    取值为0~6(星期0是星期天)
                    getHours()获取小时  取值为0~23
                    getMinutes()获取分钟     取值为0~59
                    getSeconds()获取秒  取值为0~59

                    toLocaleString()格式化的年月日时分秒，会自动补零
               
               时间戳-常用于倒计时：
                    自1970年1月1日开始至现在的毫秒数，一种特殊的计量时间的方式
                    获取时间戳：
                         1.getTime()
                              const date = new Date()
                              date.getTime()
                         2.简写 +new Date()
                              conslole.log(+new Date())
                         3.Date.now()  ->只能得到当前时间的时间戳，前两种可以返回指定时间的时间戳
                              conslole.log(Date.now())
                    转化：
                         通过时间戳得到的是毫秒，需要转化为秒再计算
                         公式：
                              D=parselnt(总秒数/60/60/24)   //计算天数
                              h=parselnt(总秒数/60/60%24)   //计算小时
                              m=parselnt(总秒数/60%60)   //计算分数
                              s=parselnt(总秒数%60)   //计算当前秒数             
          节点操作：
               DOM节点：
                    DOM树里每一个内容都称为节点
                    节点类型：
                         *元素节点：所有的标签(html是根节点)-可以更好地让我们理清楚标签元素之间的关系
                         属性节点：所有的属性
                         文本节点：所有的文本
                    查找节点-根据关系查找： 
                         父节点查找：
                              parentNode属性   (返回最近一级的父节点，找不到返回null)
                              子元素.parentNode
                         子节点查找：
                              childNodes属性    (获得所有子节点，包括文本节点(空格、换行)、注释节点等)
                              children属性(重点)(仅获得所有元素节点，返回的还是一个伪数组-亲儿子)
                              父元素.children属性
                         兄弟关系查找：
                              下一个兄弟节点：
                                   nextElementSibling属性
                              上一个兄弟节点：
                                   previousElementSibling属性
                    *增加节点：
                         步骤：
                              创建一个新节点(创建节点)
                                   document.createElement('标签名')
                              把创建的新的节点放入到指定的元素内部(追加节点)
                                   父元素.appendChild(要插入的元素)  -插入到父元素的最后一个子元素
                                   父元素.insertBefore(要插入的元素，在哪个元素的前面)
                         特殊情况：
                              复制一个原有的节点(克隆节点)
                                   元素.cloneNode(布尔值)
                                        (true-克隆时会包含后代节点一起克隆)
                                        (false，不会包含后代的节点)
                              把复制的节点放入到指定的元素内部
                    删除节点：
                         在JS原生DOM操作中，要删除元素必须通过父元素删除
                              父元素.removeChild(要删除的元素)
                         注意:
                              如不存在父子关系则删除不成功(亲爸亲儿子)
                              删除节点和隐藏节点是有区别的
          M端事件：
               触屏事件：
                    touchstart  手指触摸到一个DOM元素时触发
                    touchmove  手指在一个DOM元素上滑动时触发
                    touchend  手指从一个DOM元素上移开时触发 
     window对象：
          基本概念：
               window对象是一个全局对象，也可以说是JavaScript中的顶级对象
               像document、alert()、console.log()这些都是window的属性，基本BOM的属性和方法都是window的。
               所有通过var定义在全局作用域中的变量、函数都会变成window对象的属性和方法
               window对象下的属性和方法调用的时候可以省略window
          BOM对象：
               定时器-延时函数：
                    语法：
                         setTimeout(回调函数，等待的毫秒数)
                         清除：
                         let n=setTimeout()
                         clearTimeout(n)
                    注意：
                         延时器需要等待，所以后面的代码先执行
                         每一次调用延时器都会产生一个新的延时器
          JS执行机制：
               基本概论：
                    javascript语言的一大特点就是单线程-同一时间只能做一件事
                    (所有任务需要排队，每一个任务结束，才会执行后一个任务，如果JS执行时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉)
                    解决：同步和异步(本质区别：这条流水线上各个流程的执行顺序不同)
                    步骤：
                         1.先执行同步任务
                         2.异步任务放入任务队列中
                         3.一旦执行栈中的同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，此时被读取的异步任务是结束等待状态，进入执行栈，开始执行
               同步：
                    前一个任务结束后再执行后一个任务，程序的执行顺序与任务的排序顺序是一致的、同步的
                    同步任务(立马执行)：
                         都是在主线程上执行的，形成一个执行栈
               异步：
                    在做这件事情的同时，还可以去处理其他事情
                    异步任务(耗时执行)：
                         是通过回调函数实现的  
                         类型：
                              普通事件：click，resize等
                              资源加载：load，error等
                              定时器：setInterval，setTimeout等    
               事件循环(event loop)：
                    由于主线程不断重复获得任务、执行任务、再获取任务、再执行，所以这种机制被称为事件循环
                    (如点击事件没被点击(或定时器时间未到)之前是不进入任务队列的,而是在Web API(异步API)中,点击后进入任务队列处于等待状态,被读取后进入执行栈处于结束等待状态)
          location对象：
               拆分并保存了URL地址的各个组成部分
               常用属性和方法：
                    href属性获取完整的URL地址，对其赋值时用于地址的跳转
                         语法：    
                              location.href='url'
                    search属性获取地址中携带的参数，符号？后面部分
                         (如当提交的表单=标签中有name属性时，name属性的内容会出现在地址栏？后)
                    hash属性获取地址中的哈希值，符号#后面部分
                         后期vue路由的铺垫，经常用于不刷新页面，显示不同页面
                    reload方法用来刷新当前页面，传入参数true时表示强制刷新
                         location.reload(true)
          navigator对象：
               记录了浏览器自身的相关信息
               通过userAgent检测浏览器的版本及平台
          histroy对象：
               方法：
                    back()页面可以后退
                    forward()页面可以前进
                    go(参数)前进后退功能，参数如果是1为前进，-1为后退
          本地存储：
               数据存储在用户浏览器中，设置、读取方便，刷新页面数据不丢失(变量存储在内存，关闭则无)
               只有协议、域名、端口都相同的网页才能共享数据
               localStorage
                    可以将数据永久存储在本地(用户的电脑),除非手动删除，否则关闭页面也会存在
                    作用：
                         可以多窗口(页面)共享(同一浏览器可以共享)
                         以键值对的形式存储使用
                    语法：    
                         存储数据(本地存储只存储字符串数据类型)：
                              localStorage.setItem('key','value')
                         获取数据：
                              localStorage.getItem('key')
                         删除数据：
                              localStorage.removeItem('key')
               sessionStorage
                    生命周期为关闭浏览器窗口
                    在同一窗口(页面)下数据可以共享
                    用法跟localStorage基本相同
               存储复杂类型(对象)：
                    复杂数据类型无法直接使用，必须转换为JSON字符串存储
                    语法：    
                         localStorage.setItem('key',JSON.stringify(key))
                    把取出来的JSON字符串转换为对象
                    语法：    
                         JSON.parse(JSON字符串)
          补充：
               字符串拼接(效率更高，开发常用)：
                    map()
                         遍历数组，返回新的数组
                         也称为映射，指两个元素的集之间元素相互对应的关系
                    join()
                         把数组中的所有元素转换一个字符串，括号内是分隔方式，要用''包起来
                         若是join('')则元素直接连接
                         若是join()默认空格将各个元素分隔开
          正则表达式(RegExp)：
               基本概念：     
                    用于匹配字符串中字符组合的模式，在JavaScript中，它也是个对象
                    通常用来查找、替换那些符合正则表达式的文本，许多语言都支持正则表达式
                    例子：
                         匹配：
                              用户名表单只能输入英文字母
                         替换：
                              过滤页面内容中的一些敏感词
                         提取：
                              从字符串中获取我们想要的特定部分 
               定义规则：
                    const 常量名 = /需要检测的字符串/
               检测是否匹配：
                    常量名.test(被检测的字符串)    ->返回true，false
               查找符合规则的字符串：
                    exec() ->在一个指定字符串中执行一个搜索匹配
                    常量名.exec(被检测的字符串)    ->匹配成功返回数组，否则返回null
               元字符：
                    是一些具有特殊含义的字符，可以极大提高灵活性和强大的匹配功能
                    分类：
                         边界符(表示位置，开头和结尾，必须用什么开头，用什么结尾)：
                              用来提示字符所处位置
                              ^:表示匹配行首的文本(以谁开始 (前))
                              $:表示匹配行尾的文本(以谁结束 (后))
                              注意：如果^和$在一起，表示必须是精确匹配,在精确匹配之后使用量词重复只能出现那一个字
                                    eg：console.log(/^哈$/.test('哈哈'))     ->false(因为只能有一个哈)
                         量词(表示重复次数)：
                              用来设定某个模式出现的次数
                              *:重复零次或更多次(后)
                              +:重复一次或更多次(后)
                              ?:重复零次或一次(后)
                              {n}:重复n次(后)
                              {n,}:重复n次或更多次
                              {n,m}:重复n到m次
                              注意：逗号两侧不可出现空格
                         字符类(比如\d 表示 0~9)
                              []:匹配字符集合
                                 eg:/^[abc]$/   ->只能在abc中选一个
                                    /^[abc]/    ->可以是多个

                                   [a-z],[0-9],[A-Z] ->可连写[a-zA-Z0-9]不可以有空格
                                   [^a-z]这里的^是取反意思，除了a-z
                                   .:匹配除了换行符之外的任何一个字符
                              预定义：
                                   \d匹配0-9之间的任一数字，相当于[0-9]
                                   \D匹配所有0-9以外的字符，相当于[^0-9]
                                   \W匹配任意的字母、数字和下划线，相当于[A-Za-z0-9_]
                                   \W除所有字母、数字和下划线以外的字符，相当于[^A-Za-z0-9_]
                                   \s匹配空格（包括换行符、制表符、空格符等），相等于[\tlr\nlv\f]IS
                                   \S匹配非空格的字符，相当于[^\t\r\nlv\f]
                                        eg:
                                             日期格式：^\d{4}-\d{1,2}-\d{1,2}
                         修饰符：
                              语法：/表达式/修饰符：
                              i:ignore缩写，匹配字母不区分大小写
                              g:global缩写，匹配所有满足正则表达式的结果
                              替换：
                                   字符串.replace(/正则表达式/,'替换的文本')->只能替换第一个匹配成功的，替换全局要加g
               
JS高级：
     作用域：
          局部作用域：
               分为函数作用域和块作用域
               函数作用域：
                    在函数内部声明的变量只能在函数内部被访问，外部无法直接访问
               块作用域：
                    在JS中使用{}包裹的代码称为代码块，代码块内部的声明的变量外部将有可能无法访问
                         有可能：var声明的变量就不会产生块作用域(let和const声明的会产生块作用域)
          全局作用域：
               <script>标签和.js文件的最外层就是所谓的全局作用域
               注意：
                    为windo对象动态添加的属性默认也是全局的(不推荐)
                    函数中未使用任何关键字声明的变量为全局变量(不推荐)
                    尽可能少的声明全局变量，防止全局变量被污染
          作用域链：
               本质上是底层的变量查找机制
                    在函数被执行时，会优先在当前函数作用域中查找变量
                    如果当前作用域查找不到则会一次逐级查找父级作用域直到全局作用域
               总结：
                    嵌套关系的作用域串联起来形成了作用域链
                    相同作用域链中按照从小到大的规则查找变量
                    子作用域能够访问父作用域，父级作用域无法访问子级作用域
          垃圾回收机制(GC)：
               JS中内存的分配和回收都是自动完成的，内存在不使用的时候会被垃圾回收器自动回收
                    内存生命周期：
                         内存分配：当我们声明变量、函数、对象的时候，系统会自动为他们分配内存
                         内存使用：即读写内存，也就是使用变量、函数等
                         内存回收：使用完毕，由垃圾回收器自动回收不再使用的内存
               注意：
                    全局变量一般不会回收(关闭页面回收)
                    一般情况下局部变量的值，不用了，会被自动回收掉
                    内存泄漏：程序中分配的内存由于某种原因程序未释放或无法释放叫做内存泄漏
               拓展-算法说明：
                    栈(操作系统)：由操作系统自动分配释放函数的参数值，局部变量等，基本数据类型放到栈里面
                    堆(操作系统)：一般有程序员分配释放，若程序员不释放，由垃圾回收机制回收。复杂收据类型放到堆里面
                    垃圾回收算法：
                         引用计数法：
                              跟踪被引用的次数，如果被引用了一次，记录加一，如果引用次数是0，则释放内存
                              致命问题：嵌套引用(循环引用)，如果两个对象相互引用，尽管他们已不再使用，垃圾回收器也不会进行回收，导致内存泄漏
                         标记清除法：
                              从根部(全局对象)出发定时扫描内存中的对象，凡是能从根部到达的对象，都还是需要使用的，反之会被标记为不再使用，进行回收
          闭包：
               闭包=内层函数+外层函数的变量   ->内层函数用到了外层函数的变量
               作用：    
                    封闭数据，提供操作，外部也可以访问函数内部的变量
               应用：
                    实现数据的私有
          变量提升：
               仅存在于var声明变量，允许在变量声明之前被访问
               把所有var声明的变量提升到当前作用域的最前面，只提升声明，不提升赋值
     函数进阶：
          函数提升：
               把所有函数声明提升到当前作用域的最前面
               只提升函数声明，不提升函数调用
               注意：函数表达式必须先声明后调用
          函数参数：
               动态参数(伪数组->不可以用pop，push等方法)：
                    arguments：函数内部的伪数组变量，包含了调用函数时传入的所有实参，在函数中使用
               剩余参数(真数组)：
                    eg：function fn(...arr){
                         console.log(arr)
                         }
                         fn(1,2,3)
                    若至少传两个参数：
                         function fn(a,b,...arr){}
               补充：
                    展开运算符(与剩余参数一样是...  不会改变原数组)：
                         const arr=[1,5,2,3]
                         console.log(...arr)   ->结果为：1,5,2,3
                         常用于求数组最大值(最小值)，合并数组等
                         eg：console.log(Math.max(...arr))  ->结果：5
                         //合并数组：
                             const arr1=[6,7]
                             const arr2=[...arr,...arr1]
          *箭头函数：
               目的：更简短的函数写法并且不绑定this，箭头函数的语法比函数表达式更简洁
               使用场景：替代有一些需要匿名函数的地方
               基本语法：
                    ()=>{}
                    eg:
                         const fn = function () {}
                         等价于：const fn = () => {}             
                    只有一个形参时()可以省略
                         const fn = x => {}
                         fn(1)
                    只有一行代码时{}可省，当需要返回值时return可省
                         const fn = x => x+x
                         console.log(fn(1))  ->结果为：2
                    加括号的函数体返回对象字面量表达式
                         const fn1 = uname =>({name: uname})
                         console.log(fn1('123'))
          箭头函数参数：
               无arguments参数，但有剩余参数...
          箭头函数的this：
               箭头函数不会创建自己的this，它只会从自己的作用域链的上一层沿用this
                    (箭头函数没有this，在箭头函数内使用的this指向的是调用箭头函数的调用者的再上一个调用者)
     解构赋值：
          数组解构：
               将数组的单元值快速批量赋值给一系列变量的简洁语法(将数组元素快速批量赋值给变量)
               const []=arr
               eg:
                    const arr = [100,60,80]         ;[max,min,avg] = [100,60,80] (分号必须加)
                    const [max,min,avg] = arr    
               ;[1,2,3].map(function(){}) ->直接使用[]开头时，与立即执行函数一样需要用;隔开，不然会误认为是上一行代码的内容

               支持多维数组的结构：
                    以前取3：
                         const arr=[1,2,[3,4]]
                         console.log(arr[2][0])   ->结果；3
                    现在取3：
                         const [ , ,[c, ]][1,2,[3,4]]   ->同for循环一样省略但不省符号，c->3(对象解构不需要留,)
                         console.log(c)   ->结果；3
          对象解构：
               将对象属性和方法快速批量赋值给一系列变量的简洁语法
               const {} = {}
               eg:
                    const {uname,age} = {uname: '111', age: 18}    变量名必须和属性名相同
                                                                   (若要改变量名->const {uname: name, age} = {uname: '111', age: 18})
                                                                    ->(变量名：新变量名)
                    //等价于：const uname = obj.uname
                    多重对象结构：
                         const pig={
                              name: '佩奇',
                              family:{
                                   mother: '猪妈妈',
                                   father： '猪爸爸'
                              }
                         }
                         ->const {name,family: {mother,father}} = pig
                         若只要family里的全部数据：const {family} = pig   ->返回的是family里的所有数据
          数组对象解构：
               const [{}] =[{}]
          补充：
               forEach()
                    用于调用数组的每个元素，并将元素传递给回调函数(加强版的for循环)(只遍历不返回值)
                    使用场景：遍历数组(或数组对象)的每个元素
                    语法：    
                         被遍历的数组.forEach(function(当前数组元素,当前元素索引号){
                              //函数体
                         })
               filter()
                    创建一个新的数组，数组中的元素是通过检查指定数组中符合条件的所有元素
                    使用场景：
                         筛选数组符合条件的元素，并返回筛选之后元素的新数组
     深入对象：
          创建对象的三种方式：
               利用对象字面量创建对象
               利用new Object创建对象
                    const o=new Object({name: '111'})
               利用构造函数创建对象
                    
          构造函数：
               基本概念：
                    一种特殊的函数，主要用来初始化对象
                    命名以大写字母开头
                    只能由"new"操作符来执行
                         function Pig(uname,age){
                              this.name=name
                              this.age=age
                              }
                         const Peppa=new Pig('佩奇',6)
                    不用写return，磨人返回一个对象
                    这里new实例化执行过程：
                         1.创建新对象(空)
                         2.构造函数this指向新对象
                         3.执行构造函数代码，修改this，添加新的属性
                         4.返回新对象
               总结：
                    构造函数将变量和函数组合到了一起并能通过this实现数据的共享
                    体现了面向对象的封装特性
                    实例创建的对象彼此独立，互不影响
                    但是存在浪费内存的问题(原型解决)

     实例成员&静态成员：
          实例成员：
               实例对象中的属性和方法称为实例成员(实例属性，实例方法)
               说明：
                    为构造函数传入参数，创建结构相同但值不同的对象
                    构造函数创建的实例对象彼此独立互不影响
          静态成员：     
               构造函数的属性和方法被称为静态成员(静态属性，静态方法)
               说明：    
                    静态成员只能构造函数来访问
                    静态方法中的this指向构造函数
     内置构造函数：
          引用类型：
               Object，Array，RegExp,Date等
                    Object:
                         Object.keys(实例对象名)  ->获得实例对象里的所有属性，返回一个数组
                         Object.values(实例对象名)  ->获得实例对象里的所有属性值，返回一个数组
                         Object.assign(新实例对象名，被拷贝的实例对象名或{属性：属性值})  ->将一个实例对象拷贝给新实例对象(常用于给对象添加属性)
                    Array:
                         forEach(),
                         filter(),
                         map(),
                         arr.reduce(function(上一次值,当前值){},起始值)->累计器，经常用于求和
                         伪数组转换为真数组：
                              静态方法：Array.from()
          包装类型：
               String，Number，Boolean等
                    String:
                         split()
                    Number:
                         toFixed()->保留小数位数(四舍五入)，不填默认为整数
                         补充：
                              小数计算会有精度问题，保留位数常这么做：先乘10的n方使其变成整数，再除以n方
     编程思想：
          面向过程
               优点：性能比面向对象高，适合跟硬件联系很紧密的东西，例如单片机
               缺点：没有面向对象易维护、易复用、易扩展
          面向对象
               优点：灵活，代码可复用，容易维护和开发，更适合多人合作的大型软件项目
               缺点：性能比面向过程低
               特性：封装性，继承性，多态性
     原型：
          构造函数通过原型分配的函数是所有对象所共享的
          原型对象：每一个构造函数都有一个prototype属性，指向另一个对象，这个对象是原型对象
          我们可以把那些不变的方法，直接定义在prototype对象上，这样所有对象的实例就可以共享这些方法
          构造函数和原型对象中this都指向实例化对象

     对象原型

     原型继承：

     原型链：
          
     深浅拷贝：
          浅拷贝：
               常用方法：    
                    拷贝对象：Object.assgin()/展开运算符{...obj}
                    拷贝数组：Array.prototype.concat()/{...arr}
               缺点：
                    若对象内有方法，修改拷贝的方法会修改到被拷贝的方法
          深拷贝：
               常用方法：
                    通过递归实现(递归判断是数组还是对象时，一定要先判断是否是数组，因为数组也属于对象)
                    lodash(一个实用工具库)
                         引用：<script src="lodash.js"></script>
                         深拷贝方法：let newObj = _.cloneDeep(oldObj)    
                    通过JSON.stringify()实现(先转化为JSON字符串，在通过JSON.parse转化为对象赋给newObj，此时newObj和oldObj是两个不同的空间)
     异常处理：
          预估代码执行过程中可能发现的错误，然后最大程度的避免错误的发生导致整个程序无法继续执行
          throw抛异常：
               throw抛出异常信息，程序终止执行
               throw后面跟的是错误提示信息
               throw new Error()   ->能够设置更详细的错误信息
          try/catch捕获异常:
               捕获浏览器提供的错误信息(try试试 catch()拦住 finally最后)，不中断程序，若要中断程序，需要在catch内return(也可以与throw配合使用)
               将预估可能发生错误的代码写在try代码中
               如果try代码段中出现错误，会执行catch代码段，并截获错误信息
               finally不管是否有错，都会执行
               catch(参数)  利用catch的参数调用错误信息(参数.massge)
          debugger:
               方便的断点调试跳转
     处理this：
          this指向：
               普通函数：谁调用指向谁，如果处于严格模式('use strict')原本指向window变为指向undefind
               箭头函数：箭头函数本身没有this
                        由内向外逐层找this，沿用其上一级this
                        原型函数、构造函数、dom事件函数等不适用
          改变this：
               方法：    
                    call()-了解
                         调用函数，同时指定被调用函数中this指向
                         语法：
                              函数名.call(指向,参数1,参数2,...)
                    apply()
                         调用函数，同时指定被调用函数中this指向
                         语法：    
                              函数名.apply(指向,参数数组)
                    bind()-重要
                         不调用函数，但可以改变指定被调用函数中this指向
                         语法：
                              函数名.bind(指向,参数1,参数2,...)
                    注意：
                         前两个返回值都是函数的返回值，bind返回值是原函数拷贝过来的新函数，这个新函数this是改过的
     防抖(debounce)：
          单位时间内，频繁触发事件，只执行最后一次
          核心就是利用定时器(setTimeout)来实现
          使用场景：     
               搜索框搜索输入：只需用户输入最后一次输入完，再发送请求
               手机号、邮箱验证输入检测
          方法：
               手写防抖函数
                    核心就是利用定时器来实现，先声明一个定时器变量，当事件触发的时候先判断有没有定时器，如果有，先清除，
                    然后再把定时器存入定时器变量，把需要用到防抖操作的内容放在定时器里
               lodash库方法：
                    _.debounce(func,[延迟时间])
     节流(throttle)：
          单位时间内，频繁触发事件，只执行一次
          使用场景：     
               鼠标移动、页面尺寸缩放、滚动条滚动等高频事件
          方法：
               手写节流函数
                    核心也是利用定时器shixiande，先声明一个空值定时器变量，当事件触发时，判断是否有定时器，如果有，不管，
                    如果没有，把定时器存入变量中，再把需要进行节流操作的内容放入定时器中，再把变量声明回空值
               lodash库方法：
                    _.throttle(func,[延迟时间])

补充：
     事件类型：
          timeupdate视频/音频当前的播放位置改变时触发(ontimeupdate是属性)
          loadeddata在当前帧的数据加载完成且还没有足够的数据播放视频/音频的下一帧时触发(onloadeddata是属性)


                

     

               



                    




                    




