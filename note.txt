<!-- Javascript(弱数据类型，只有当赋值后才知道是数据类型)组成：ECMAScript，Web APIs(DOM,BOM) -->
<!-- 输入：prompt()
     输出：
          在body输出：document.write()
          在打印台输出：console.log()

     定义：let(变量)，const(常量)

     基本数据类型：数字型number ->整数、小数、负数
                  字符串型string
                  布尔型boolean ->ture false(''->空字符串、0、undefind、false、NaN、null转换为布尔值后都是false)
                  未定义型undefined ->undefined(未赋值)
                  空类型null ->object(用于尚未创建的对象)(赋值了，但内容为空)  
     引用数据类型：object对象

     注释：''   ""   ``

     算术运算符：+、-、*、/、% (除了+需要看情况，其他均会转化为数字型进行计算)
                             ('1'-1:结果为0) 
                            （+'123':将123这个字符串转化为数字型）
                             (1+'123':会将1转化为字符串，结果为1123)
           -->
<!-- 模板字符串：用反引号，${变量名}
     隐式转换：系统自动进行转换处理
     显示转换：程序员做转换处理
               转换为数字型：Number ->转换为数字型
                                     若内容有非数字，转换失败时结果为NaN
                            parselnt ->只保留整数
                            parseFloat ->可以保留小数 -->
4.数组(有序)
     增:数组.push('元素1,元素2,....')        ->加在数组后面，增加一个或多个，返回值是数组的新长度
        数组.unshift()                      ->加在数组前面，增加一个或多个，返回值是数组的新长度
     删:数组.pop()                          ->删除最后一个，只能删一个，不带参数，返回值是删除的元素
        数组.shift()                        ->删除第一个，只能删一个，不带参数，返回值是删除的元素
        数组.splice()                       ->删除指定元素
                                            ->数组.splice(起始位置，删除几个元素(若不写默认从起始位置删完))
5.函数->(抽取，封装)
     声明格式：
          function 函数名(){            
               函数体
          }
     调用格式：
          函数名()

     
     函数表达式法：                      
          let fn=function(){
               函数体
          }
     调用：
          fn()
     
     立即执行法(前后必须打上分号)：
     (1)
     ;(function () {} )();
     (2)
     ;(function () {} ());

7. 对象(无序)
     JavaScript里的一种数据类型
     可以详细的描述某个事物


     声明语法：
          let 对象名 = {
               属性：属性值,
               方法名：函数
          }


     查：
          对象名.属性
          对象名['属性名']
     改：对象名.属性=属性值
     增：对象名.新属性=属性值
     删：delete 对象名.属性  (了解)
     
     
     方法调用：对象名.方法名


     内置对象-Math：
          random：生成[0-1)之间的随机数
                  Math.floor(Math.random()*11)          ->生成[0-10]之间的随机数
                  Math.floor(Math.random()*(m-n+1)+n)   ->生成[n-m]之间的随机数
          ceil；向上取整
          floor；向下取整
          max；找最大数
          min：找最小数
          pow：幂运算
          abs：绝对值

8.Web APIs
     作用：使用JS去操作html和浏览器
     分类：DOM(文档对象模型)
               作用：操作网页内容->操作标签，开发网页内容特效和实现用户交互
               DOM树：将HTML文档以树状结构直观的表现出来。直观的体现了标签与标签之间的关系
          BOM(浏览器对象模型)

     DOM对象：浏览器根据html标签生成的js对象
               所有的标签属性都可以在这个对象上面找到
               修改这个对象的属性会自动映射到标签身上 

               document对象：提供的属性和方法都是用来访问和操作网页内容的，网页所有内容都在document里面

               获取DOM元素：
                    根据css选择器来获取DOM元素
                         选择匹配的第一个元素：document.querySelector(CSS选择器字符串)
                         选择匹配的多个元素：document.querySelectorAll('')
                         注意：哪怕只有一个元素，通过querySelectorAll()获取过来的也是一个伪数组
               
               操作元素属性：
                    操作元素常用属性：对象.属性=值
               操作元素样式属性：
                    对象.style.样式属性='值'
                    对象.className='类名'         ->会覆盖之前存在的类，需要将所有类全部填入
                    对象.classList.add('类名')    ->新增类，之前的类还在，且不用写进来
                    对象.classList.remove('类名') ->删除类
                    对象.classList.toggle('类名') ->切换类，有就删，无就加
               操作表单元素属性：
                    获取：对象.属性名
                    设置：对象.属性名=新值
                    表单属性中添加就有效果，移除就没有效果，一律使用布尔值表示，如果为true代表添加了该属性，如果是false代表移除了该属性，如disabled，checked，selected

               自定义属性：
                    以data-开头
                    在DOM对象上一律以dataset对象方式获取
                    eg：data-id
                        获取：对象.dataset.id
     定时器-间歇函数
          使用场景：每隔一段时间需要自动执行一段代码，不需要我们手动去触发，例如：倒计时
          开启定时器：setInterval(函数名,间隔时间)  ->每隔一段时间调用这个函数，单位毫秒（ms）1s=1000ms,但不带单位，函数不加小括号，若要加，需要''
                     返回的是一个id数字(第几个定时器)
          关闭定时器：let 变量名=setInterval(函数名,间隔时间)
                     clearInterval(变量名)
     
     事件监听：
          就是让程序检测是否有事件发生，一旦有事件触发，就立即调用一个函数做出响应，也称为绑定事件或者注册事件
          事件：在编程时系统内发生的动作或发生的事，如用户在网页上单击一个按钮
          语法：
               元素对象.addEventListener('事件类型',要执行的函数)
          三要素：
               事件源(哪个dom元素被事件触发了)
               事件类型(用什么方式触发)：鼠标事件：鼠标触发：
                                                       click点击
                                                       mouseenter鼠标经过
                                                       mouseleave鼠标离开
                                       焦点事件：表单获得光标：
                                                       focus获得光标
                                                       blur失去焦点
                                       键盘事件：键盘触发：
                                                       Keydown键盘按下触发
                                                       Keyup键盘抬起触发
                                       文本事件：表单输入触发：
                                                       input用户输入
               事件处理程序(调用的函数)
          版本：
               DOM L0:事件源.on事件=function(){}    ->会覆盖
               DOM L2:事件源.addEventListener(事件，事件处理函数)    ->不会出现事件覆盖情况
          

